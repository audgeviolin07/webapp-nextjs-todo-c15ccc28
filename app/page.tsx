'use client'\n\nimport { useState, useEffect } from 'react'\nimport { supabase } from '@/lib/supabase'\nimport { Todo, TodoInsert, TodoUpdate } from '@/types/database'\nimport { Plus, Trash2, Check } from 'lucide-react'\n\nexport default function Home() {\n  const [todos, setTodos] = useState<Todo[]>([])\n  const [newTodo, setNewTodo] = useState('')\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchTodos()\n  }, [])\n\n  const fetchTodos = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('todos')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n      setTodos(data || [])\n    } catch (error) {\n      console.error('Error fetching todos:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const addTodo = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!newTodo.trim()) return\n\n    try {\n      const todoData: TodoInsert = {\n        title: newTodo.trim(),\n        completed: false\n      }\n\n      const { data, error } = await supabase\n        .from('todos')\n        .insert([todoData])\n        .select()\n        .single()\n\n      if (error) throw error\n      \n      setTodos(prev => [data, ...prev])\n      setNewTodo('')\n    } catch (error) {\n      console.error('Error adding todo:', error)\n    }\n  }\n\n  const toggleTodo = async (id: string, completed: boolean) => {\n    try {\n      const updateData: TodoUpdate = {\n        completed: !completed,\n        updated_at: new Date().toISOString()\n      }\n\n      const { error } = await supabase\n        .from('todos')\n        .update(updateData)\n        .eq('id', id)\n\n      if (error) throw error\n\n      setTodos(prev => prev.map(todo => \n        todo.id === id ? { ...todo, completed: !completed } : todo\n      ))\n    } catch (error) {\n      console.error('Error toggling todo:', error)\n    }\n  }\n\n  const deleteTodo = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from('todos')\n        .delete()\n        .eq('id', id)\n\n      if (error) throw error\n\n      setTodos(prev => prev.filter(todo => todo.id !== id))\n    } catch (error) {\n      console.error('Error deleting todo:', error)\n    }\n  }\n\n  const filteredTodos = todos.filter(todo => {\n    if (filter === 'active') return !todo.completed\n    if (filter === 'completed') return todo.completed\n    return true\n  })\n\n  const completedCount = todos.filter(todo => todo.completed).length\n  const activeCount = todos.length - completedCount\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n      <div className=\"bg-white rounded-2xl shadow-xl p-8\">\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-8 text-center\">\n          Todo List\n        </h1>\n\n        {/* Add Todo Form */}\n        <form onSubmit={addTodo} className=\"mb-8\">\n          <div className=\"flex gap-3\">\n            <input\n              type=\"text\"\n              value={newTodo}\n              onChange={(e) => setNewTodo(e.target.value)}\n              placeholder=\"Add a new todo...\"\n              className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <button\n              type=\"submit\"\n              className=\"px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors flex items-center gap-2\"\n            >\n              <Plus size={20} />\n              Add\n            </button>\n          </div>\n        </form>\n\n        {/* Filter Buttons */}\n        <div className=\"flex gap-2 mb-6\">\n          {(['all', 'active', 'completed'] as const).map((filterType) => (\n            <button\n              key={filterType}\n              onClick={() => setFilter(filterType)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                filter === filterType\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {filterType.charAt(0).toUpperCase() + filterType.slice(1)}\n              {filterType === 'active' && activeCount > 0 && (\n                <span className=\"ml-1 bg-white text-blue-500 px-2 py-0.5 rounded-full text-xs\">\n                  {activeCount}\n                </span>\n              )}\n              {filterType === 'completed' && completedCount > 0 && (\n                <span className=\"ml-1 bg-white text-blue-500 px-2 py-0.5 rounded-full text-xs\">\n                  {completedCount}\n                </span>\n              )}\n            </button>\n          ))}\n        </div>\n\n        {/* Todo List */}\n        <div className=\"space-y-3\">\n          {filteredTodos.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <div className=\"text-6xl mb-4\">üìù</div>\n              <p className=\"text-lg\">\n                {filter === 'all' \n                  ? 'No todos yet. Add one above!' \n                  : `No ${filter} todos.`\n                }\n              </p>\n            </div>\n          ) : (\n            filteredTodos.map((todo) => (\n              <div\n                key={todo.id}\n                className={`flex items-center gap-3 p-4 bg-gray-50 rounded-lg border transition-all hover:shadow-md ${\n                  todo.completed ? 'border-green-200 bg-green-50 opacity-75' : 'border-gray-200'\n                }`}\n              >\n                <button\n                  onClick={() => toggleTodo(todo.id, todo.completed || false)}\n                  className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${\n                    todo.completed\n                      ? 'bg-green-500 border-green-500 text-white'\n                      : 'border-gray-300 hover:border-blue-500'\n                  }`}\n                >\n                  {todo.completed && <Check size={14} />}\n                </button>\n                \n                <div className=\"flex-1\">\n                  <h3 className={`font-medium ${\n                    todo.completed ? 'text-gray-500 line-through' : 'text-gray-800'\n                  }`}>\n                    {todo.title}\n                  </h3>\n                  {todo.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {todo.description}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    {new Date(todo.created_at || '').toLocaleDateString()}\n                  </p>\n                </div>\n                \n                <button\n                  onClick={() => deleteTodo(todo.id)}\n                  className=\"flex-shrink-0 p-2 text-gray-400 hover:text-red-500 transition-colors\"\n                >\n                  <Trash2 size={16} />\n                </button>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Stats */}\n        {todos.length > 0 && (\n          <div className=\"mt-8 pt-6 border-t border-gray-200\">\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>{activeCount} active</span>\n              <span>{completedCount} completed</span>\n              <span>{todos.length} total</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}